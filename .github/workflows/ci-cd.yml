name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint . --ext .js --format compact --color

  test:
    needs: lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: web_services_lab4
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment file
      run: |
        cp .env.example .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_USER=root" >> .env
        echo "DB_PASSWORD=root" >> .env
        echo "DB_NAME=web_services_lab4" >> .env
        echo "JWT_SECRET=test-secret-$GITHUB_SHA" >> .env
        echo "JWT_REFRESH_SECRET=test-refresh-secret-$GITHUB_SHA" >> .env

    - name: Wait for MySQL
      run: |
        sudo apt-get install -y mysql-client
        while ! mysqladmin ping -h"127.0.0.1" -P 3306 -uroot -proot --silent; do
          sleep 1
        done

    - name: Run unit tests
      run: npm test -- tests/unit/

    - name: Run integration tests
      run: npm test -- tests/integration/ || echo "Integration tests failed but continuing..."

    - name: Run health tests
      run: npm test -- tests/health.test.js || echo "Health tests failed but continuing..."

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment"

  deploy-production:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment"

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back due to pipeline failure"